name: Media Fetcher

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'Media URL'
        required: true
        type: string
      account_type:
        description: 'Cookies Account Type (primary/backup)'
        required: false
        type: string
        default: 'primary'
      resumeUrl:
        description: 'Webhook URL to resume n8n'
        required: true
        type: string

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/bin
            ~/.cache/yt-dlp-version
            ~/.cache/ffmpeg-version
          key: ${{ runner.os }}-media-tools-v3-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-media-tools-v3-
            ${{ runner.os }}-media-tools-

      - name: Install & Cache yt-dlp
        run: |
          mkdir -p ~/.local/bin ~/.cache
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Get latest version info
          LATEST_VERSION=$(curl -s https://api.github.com/repos/yt-dlp/yt-dlp/releases/latest | grep '"tag_name"' | cut -d'"' -f4)
          
          # Check if update needed
          if [ -f ~/.local/bin/yt-dlp ] && [ -f ~/.cache/yt-dlp-version ]; then
            CACHED_VERSION=$(cat ~/.cache/yt-dlp-version)
            if [ "$CACHED_VERSION" = "$LATEST_VERSION" ]; then
              echo "✅ yt-dlp $CACHED_VERSION (cached)"
              chmod +x ~/.local/bin/yt-dlp
              exit 0
            fi
          fi
          
          # Download latest
          echo "📥 Installing yt-dlp $LATEST_VERSION"
          curl -sL "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp" -o ~/.local/bin/yt-dlp
          chmod +x ~/.local/bin/yt-dlp
          echo "$LATEST_VERSION" > ~/.cache/yt-dlp-version          
          echo "✅ yt-dlp $LATEST_VERSION installed"

      - name: Install & Cache ffmpeg
        run: |
          # Add to PATH first
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
          # Get latest git master build date from main page
          LATEST_FFMPEG_BUILD=$(curl -s "https://johnvansickle.com/ffmpeg/" | \
            grep -o 'built on [0-9]\{8\}' | \
            grep -o '[0-9]\{8\}' || echo "")
          
          # Use fallback if date detection fails
          if [ -z "$LATEST_FFMPEG_BUILD" ]; then
            LATEST_FFMPEG_BUILD="git-master"
          fi
          
          # Check if update needed
          if [ -f ~/.local/bin/ffmpeg ] && [ -f ~/.cache/ffmpeg-version ]; then
            CACHED_VERSION=$(cat ~/.cache/ffmpeg-version)
            # Verify cached version works and is up to date
            if ~/.local/bin/ffmpeg -version &>/dev/null && [ "$CACHED_VERSION" = "$LATEST_FFMPEG_BUILD" ]; then
              echo "✅ ffmpeg $CACHED_VERSION (cached)"
              exit 0
            fi
          fi
            # Download git master static builds (most up-to-date)
          echo "📥 Installing ffmpeg git master ($LATEST_FFMPEG_BUILD)"
          mkdir -p ~/.local/bin ~/.cache
          
          # Try multiple possible URLs for ffmpeg download
          FFMPEG_URLS=(
            "https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz"
          )
          
          for url in "${FFMPEG_URLS[@]}"; do
            echo "Trying: $url"
            if curl -sL "$url" | tar -xJ --strip-components=1 -C ~/.local/bin/ --wildcards "*/ffmpeg" "*/ffprobe" 2>/dev/null; then
              echo "✅ Successfully downloaded from: $url"
              break
            else
              echo "❌ Failed: $url"
            fi
          done
          
          chmod +x ~/.local/bin/ffmpeg ~/.local/bin/ffprobe
          
          # Cache version info
          echo "$LATEST_FFMPEG_BUILD" > ~/.cache/ffmpeg-version
          echo "✅ ffmpeg git master $LATEST_FFMPEG_BUILD installed"

      - name: Process Media
        run: |
          # Setup cookies
          if [ "${{ github.event.inputs.account_type }}" = "backup" ]; then
            echo "${{ secrets.BACKUP_INSTA_COOKIES }}" > cookies.txt
          else
            echo "${{ secrets.INSTA_COOKIES }}" > cookies.txt
          fi
          # Download with optimal settings
          yt-dlp --cookies cookies.txt "${{ github.event.inputs.url }}" \
            --get-description > description.txt
          
          yt-dlp --cookies cookies.txt "${{ github.event.inputs.url }}" \
            -o "reel.mp4" --recode-video mp4 \
            --format "best[ext=mp4]/best" \
            --merge-output-format mp4 \
            --no-multistreams \
            --no-playlist --no-warnings
            
      - name: Send to n8n
        run: |
          # Create JSON payload using files to avoid command line length limits
          echo '{"status": "completed", "message": "Media processing complete.", "media": "' > payload.json
          base64 -w 0 reel.mp4 >> payload.json
          echo '", "description": "' >> payload.json
          base64 -w 0 description.txt >> payload.json
          echo '"}' >> payload.json
          
          # Send using file instead of inline data          
          curl -X POST "${{ github.event.inputs.resumeUrl }}" \
            -H "Content-Type: application/json" \
            -d @payload.json

      - name: Save Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/bin
            ~/.cache/yt-dlp-version
            ~/.cache/ffmpeg-version
          key: ${{ runner.os }}-media-tools-v3-${{ github.run_number }}